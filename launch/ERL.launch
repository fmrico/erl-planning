<!-- ROSPlan turtlebot demo; requires turtlebot_gazebo -->
<launch>
<param name="/rosplan/domain_path" value="$(find test_rosplan)/domains/domain_erl_attending.pddl" />

	<node name="rosplan_knowledge_base" pkg="rosplan_knowledge_base" type="knowledgeBase" respawn="false" output="screen">
	</node>

	<node name="rosplan_scene_base" pkg="mongodb_store" type="mongodb_server.py" respawn="false" output="screen">
	    <param name="database_path" value="$(find rosplan_knowledge_base)/common/mongoDB" />
	</node>
	<node name="rosplan_scene_message_store" pkg="mongodb_store" type="message_store_node.py" respawn="false" output="screen">
	</node>

	<node name="rosplan_planning_system" pkg="rosplan_planning_system" type="planner" respawn="false" output="screen">
		<param name="data_path" value="$(find test_rosplan)/common/" />
		<param name="problem_path" value="$(find test_rosplan)/common/problem.pddl" />
		<param name="strl_file_path" value="$(find test_rosplan)/common/plan.strl" />

		<param name="planner_command" value="timeout 10 $(find rosplan_planning_system)/common/bin/popf -n DOMAIN PROBLEM" />
		<param name="generate_default_problem" value="true" />
		<param name="max_dispatch_attempts" value="2" />
  </node>

	<node name="rosplan_interface_wait_bell" pkg="test_rosplan" type="rp_wait_bell" respawn="false" output="screen">
		<param name="pddl_action_name" value="wait_bell" />
	</node>

	<node name="rosplan_interface_attend_deli" pkg="test_rosplan" type="rp_attend_deli" respawn="false" output="screen">
		<param name="pddl_action_name" value="attend_deli" />
	</node>

	<node name="rosplan_interface_attend_doctor" pkg="test_rosplan" type="rp_attend_doctor" respawn="false" output="screen">
		<param name="pddl_action_name" value="attend_doctor" />
	</node>


	<node name="rosplan_interface_recognize_person" pkg="test_rosplan" type="rp_recognize_person" respawn="false" output="screen">
		<param name="pddl_action_name" value="recognize_person" />
	</node>

</launch>
